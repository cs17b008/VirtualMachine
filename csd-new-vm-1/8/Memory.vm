function Memory.init 1
push argument 0
pop pointer 0
push constant 1234
pop static 4
push constant 2468
pop static 3
push constant 0
pop static 0
push static 4
pop static 1
push constant 0
pop static 5
push constant 1
pop static 6
push static 3
push static 4
sub
push static 1
push static 5
add
pop pointer 1
pop that 0
push constant 0
push static 1
push static 6
add
pop pointer 1
pop that 0
push constant 1
neg
pop static 7
push constant 0
return

function Memory.peek 1
push argument 0
pop pointer 0
push static 0
push argument 1
add
pop pointer 1
push that 0
return

function Memory.poke 1
push argument 0
pop pointer 0
push argument 2
push static 0
push argument 1
add
pop pointer 1
pop that 0
push constant 0
return

function Memory.bestFit 5
push argument 0
pop pointer 0
push constant 0
pop local 1
push static 3
push static 4
sub
pop local 2
push static 1
pop local 0
push local 0
push static 6
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto MemoryL1
push local 0
return
label MemoryL1
label MemoryL2
push local 0
not
if-goto MemoryL3
push local 0
push static 5
add
pop pointer 1
push that 0
push constant 1
sub
pop local 3
push local 3
push argument 1
gt
push local 3
push local 2
lt
and
not
if-goto MemoryL4
push local 0
pop local 1
push local 3
pop local 2
label MemoryL4
push local 0
push static 6
add
pop pointer 1
push that 0
pop local 0
goto MemoryL2
label MemoryL3
push local 1
return

function Memory.alloc 4
push argument 0
pop pointer 0
push argument 1
call Memory.bestFit 1
pop local 0
push local 0
push constant 1
add
pop local 2
push local 0
not
if-goto MemoryL5
push local 0
push static 5
add
pop pointer 1
push that 0
push argument 1
push constant 3
add
gt
not
if-goto MemoryL6
push local 0
push argument 1
add
push constant 1
add
pop local 1
push local 0
push static 6
add
pop pointer 1
push that 0
push local 1
push static 6
add
pop pointer 1
pop that 0
push local 0
push static 5
add
pop pointer 1
push that 0
push argument 1
sub
push constant 1
sub
push local 1
push static 5
add
pop pointer 1
pop that 0
push argument 1
push constant 1
add
push local 2
push static 7
add
pop pointer 1
pop that 0
push local 1
pop static 1
goto MemoryL7
label MemoryL6
push local 0
push static 6
add
pop pointer 1
push that 0
pop local 1
push local 0
push static 5
add
pop pointer 1
push that 0
push local 2
push static 7
add
pop pointer 1
pop that 0
label MemoryL7
push local 1
pop local 0
label MemoryL5
push local 2
return

function Memory.deAlloc 4
push argument 0
pop pointer 0
push argument 1
push static 7
add
pop pointer 1
push that 0
pop local 2
push argument 1
push constant 1
sub
pop argument 1
push argument 1
call Memory.findPreFree 1
pop local 0
push local 0
push constant 0
eq
not
if-goto MemoryL8
push local 2
push argument 1
push static 5
add
pop pointer 1
pop that 0
push static 1
push argument 1
push static 6
add
pop pointer 1
pop that 0
push argument 1
pop static 1
goto MemoryL9
label MemoryL8
push local 0
push local 0
push static 5
add
pop pointer 1
push that 0
add
push argument 1
eq
not
if-goto MemoryL10
push local 0
push static 5
add
pop pointer 1
push that 0
push local 2
add
push local 0
push static 5
add
pop pointer 1
pop that 0
push local 0
pop argument 1
goto MemoryL11
label MemoryL10
push local 2
push argument 1
push static 5
add
pop pointer 1
pop that 0
push local 0
push static 6
add
pop pointer 1
push that 0
push argument 1
push static 6
add
pop pointer 1
pop that 0
push argument 1
push local 0
push static 6
add
pop pointer 1
pop that 0
label MemoryL11
label MemoryL9
push argument 1
push argument 1
push static 5
add
pop pointer 1
push that 0
add
push argument 1
push static 6
add
pop pointer 1
push that 0
eq
not
if-goto MemoryL12
push argument 1
push static 6
add
pop pointer 1
push that 0
pop local 1
push argument 1
push static 5
add
pop pointer 1
push that 0
push local 1
push static 5
add
pop pointer 1
push that 0
add
push argument 1
push static 5
add
pop pointer 1
pop that 0
push local 1
push static 6
add
pop pointer 1
push that 0
push argument 1
push static 6
add
pop pointer 1
pop that 0
label MemoryL12
push constant 0
return

function Memory.findPreFree 2
push argument 0
pop pointer 0
push static 1
push argument 1
gt
not
if-goto MemoryL13
push constant 0
return
label MemoryL13
push static 1
pop local 0
label MemoryL14
push local 0
push static 6
add
pop pointer 1
push that 0
push local 0
push static 6
add
pop pointer 1
push that 0
push argument 1
lt
and
not
if-goto MemoryL15
push local 0
push static 6
add
pop pointer 1
push that 0
pop local 0
goto MemoryL14
label MemoryL15
push local 0
return

